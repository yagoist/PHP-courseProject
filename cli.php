<?php//require_once __DIR__. '/vendor/autoload.php';use courseProject\src\Articles\Articles;use courseProject\src\Commands\Arguments;use courseProject\src\Commands\Articles\DeleteArticle;use courseProject\src\Commands\CreateUserCommand;use courseProject\src\Commands\FakeData\PopulateDB;use courseProject\src\Commands\Users\CreateUser;use courseProject\src\Commands\Users\UpdateUser;use courseProject\src\Exceptions\AppException;use courseProject\src\Exceptions\CommandException;use courseProject\src\Repositories\SqliteArticlesRepository\SqliteArticlesRepository;use courseProject\src\Repositories\SqliteCommentsRepository\SqliteCommentsRepository;use courseProject\src\Repositories\UsersRepository\SqliteUsersRepository;use courseProject\src\UUID;use Psr\Log\LoggerInterface;use Symfony\Component\Console\Application;$container = require __DIR__.'/bootstrap.php';//проверка Symfony Console$application = new Application();$commandsClasses = [    CreateUser::class,    DeleteArticle::class,    UpdateUser::class,    PopulateDB::class];foreach ($commandsClasses as $commandsClass) {    $command = $container->get($commandsClass);    $application->add($command);}$application->run();// проверка логгера на создании юзера//$command = $container->get(CreateUserCommand::class);////$logger = $container->get(LoggerInterface::class);////try {//    $command->handle(Arguments::fromArgv($argv));//} catch (AppException $e) {//    $logger->error($e->getMessage(), ['exception' => $e]);//}//проверка работы командной строки//$userRepository = new SqliteUsersRepository(//    new PDO('sqlite:'.__DIR__.'/identifier.sqlite')//);////$command = new CreateUserCommand($userRepository);////try {//    $command->handle($argv);//} catch (CommandException $e) {//    echo "{$e->getMessage()}\n";//}// проверка работы базы//$connection = new PDO('sqlite:'.__DIR__.'/identifier.sqlite');////$faker = new Faker\Factory::create();//////$userRepository = new SqliteUsersRepository($connection);//$commentsRepository = new SqliteCommentsRepository($connection);//$articleRepository = new SqliteArticlesRepository($connection);//////$userRepository->save(new Users(UUID::random(), 'MegaIvan2', 'Ivan', 'Ivanov'));////$userRepository->save(new Users(UUID::random(), 'TotalNikita2', 'Nikita', 'VsyoPobrito'));//////$articleRepository->save(////    new Articles(////        UUID::random(),////        new UUID('17c134f0-a916-4ac6-ab1b-5c5f660553cb'),////        'header',////        'some text'////    ));////////$commentsRepository->save(////    new Comments(////        UUID::random(),////        new UUID('17c134f0-a916-4ac6-ab1b-5c5f660553cb'),////        new UUID('2c1cdf50-cdd2-4036-a189-948a533a6f37'),////        'some comment'////    ));//////$post = $userRepository->get(new UUID('17c134f0-a916-4ac6-ab1b-5c5f660553cb'));//print_r($post);